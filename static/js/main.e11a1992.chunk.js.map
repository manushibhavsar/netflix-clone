{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","base_url","Row","_ref","title","fetchUrl","isLargeRow","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","_useState3","_useState4","trailerUrl","setTrailerUrl","useEffect","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","request","wrap","_context","prev","next","get","sent","data","results","abrupt","stop","apply","this","arguments","fetchData","react_default","createElement","className","map","movie","key","id","concat","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","index_esm","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflix0riginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","src_Nav","src_Banner","src_Row","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e11a1992.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n})\n\nexport default instance;","import React, { useState,useEffect } from 'react'\nimport axios from \"./axios\";\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() =>{\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n        //whenevr you are using useEffect and any variable that is pulled outside of the block you need to pass in epmpty braces so that useeffect update itself whenever there's a change in that variable \n    }, [fetchUrl])\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars : {\n             // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n        },\n    }\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailerUrl(\"\");\n        } else{\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n\n            }).catch(error => console.log(error))\n        }\n    }\n    return (\n        <div className='row'>\n                <h1 className='row__title'>{title}</h1>\n            <div className='row_posters'>\n            {/* for going through the array of movies and displaying the psoter of each movie we map through them */}\n            {movies.map(movie => (\n                \n                <img\n                // when anything in the movie list changes it won't re-render the entire row but it will re-render thatspecific movie poster\n                key={movie.id} \n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                onClick={() => handleClick(movie)}\n                // if the component is using isLargeRow only then display the the poster other then that display thumbnails\n                src={`${base_url}${ isLargeRow ? movie.poster_path :  movie.backdrop_path}`} \n                alt={movie.name}/>\n                \n            )) }\n\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n        </div>\n    )\n}\n\nexport default Row\n","const API_KEY = \"188b08b84ad6faacb0cb608415374cee\";\n\nconst \nrequests ={\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\nfetchNetflix0riginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\nfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\nfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\nfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n\n}\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport './banner.css';\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflix0riginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n\n    }, []);\n    console.log(movie);\n   const truncate = (str, n) =>{\n    //    check whether string exists with optional chaining\n    // if it does check the length and if the length is greater than n \n    // add \"...\" otherwise keep the string as it is. \n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    \n    return (\n        \n\n<header \nclassName='banner'\nstyle={{\n    backgroundSize: \"cover\",\n    backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n    backgroundPosition: \"center center\",\n    \n}}>\n \n <div className='banner__contents'>\n\n    <h1 className='banner__title'>\n{movie?.title || movie?.name || movie?.original_name}\n    </h1>\n    <div className='banner__buttons'>\n    <button className='banner__button'>\n        Play\n    </button>\n    <button className='banner__button'>\nMy List\n    </button>\n    <h1 className='banner__description'>{truncate(movie?.overview, 150)}</h1>\n</div>\n\n\n</div>\n<div className='banner--fadeBottom'/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react';\nimport './nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    useEffect(() => {\n        \n\n        window.addEventListener(\"scroll\", () => {\n            window.scrollY > 100 ? handleShow(true) : handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, [])\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img \n            className='nav__logo'\n            src='https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg'\n            alt='Netflix-logo'\n            />\n\n            <img \n                className='nav__avatar'\n                src='https://occ-0-748-999.1.nflxso.net/dnm/api/v6/K6hjPJd6cR6FpVELC5Pd6ovHRSk/AAAABbme8JMz4rEKFJhtzpOKWFJ_6qX-0y5wwWyYvBhWS0VKFLa289dZ5zvRBggmFVWVPL2AAYE8xevD4jjLZjWumNo.png?r=a41'\n                alt='Netflix Logo'\n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import React  from \"react\";\nimport './App.css';\nimport Row from \"./Row\"\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Nav/>\n\n    <Banner/>\n    \n    <Row \n    title=\"Netflix Original\" \n    fetchUrl={requests.fetchNetflix0riginals} \n    isLargeRow\n    />\n    <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n    <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n    <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n    <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n    <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n    <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n    <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}